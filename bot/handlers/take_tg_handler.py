import asyncio
import re
import os

from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy.orm.sync import clear
from telethon import TelegramClient, events
from telethon.sessions import StringSession

from bot.core.bot_instance import bot
from db.services.telegram_crud import get_telegram_account_by_alias
from db.models.model import User
from dotenv import load_dotenv

load_dotenv()
API_TELETHON_ID = int(os.getenv("API_TELETHON_ID"))
API_TELETHON_HASH = os.getenv("API_TELETHON_HASH")

router = Router()

async def listen_for_code(string_session, chat_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    client = TelegramClient(StringSession(string_session), API_TELETHON_ID, API_TELETHON_HASH)
    await client.connect()

    # –ø—Ä–æ—Å–ª—É—à–∫–∞ —á–∞—Ç–∞ 777000
    @client.on(events.NewMessage(incoming=True, chats=(777000,)))
    async def handler(event):
        message_text = event.raw_text
        # –ò—â–µ–º —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ –∏–∑ 5-6 —Ü–∏—Ñ—Ä
        match = re.search(r"\b\d{5,6}\b", message_text)
        if match:
            code = match.group(0)
            await bot.send_message(chat_id, f"üîë –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}")
    # —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    await client.run_until_disconnected()


@router.message(Command("take_tg"))
async def cmd_take_tg(message: types.Message, current_user: User):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ alias –∏ –∂–¥—ë–º, –∫–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å."""
    alias = message.text.split(maxsplit=1)[1].strip() if len(message.text.split()) > 1 else None
    if not alias:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ alias –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: `/give_tg <my_account>`")
        return

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ —Å –ë–î
    account = get_telegram_account_by_alias(user_id=current_user.id, alias=alias)
    if not account:
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ alias –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ f2a, –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if account.get('two_factor') is True:
        await message.answer(
            f"‚úÖ –í–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∞–∫–∫–∞—É–Ω—Ç—É {alias}:\nüìû {account['phone']}\npass: {account['two_factor_pass']} \n\n–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤ Telegram.")
    else:
        await message.answer(f"‚úÖ –í–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∞–∫–∫–∞—É–Ω—Ç—É {alias}:\nüìû {account['phone']}\n\n–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤ Telegram.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–æ–¥–∞
    asyncio.create_task(listen_for_code(account['session_string'], message.chat.id))