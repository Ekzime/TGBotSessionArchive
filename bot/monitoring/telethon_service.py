import asyncio
import logging
from typing import Dict

from telethon import TelegramClient, events
from telethon.sessions import StringSession

from config import settings
from db.services.telegram_crud import (
    list_telegram_accounts_with_monitoring,
    create_telegram_message,
    mark_deleted_messages,
)

logger = logging.getLogger(__name__)

API_TELETHON_ID = settings.API_TELETHON_ID
API_TELETHON_HASH = settings.API_TELETHON_HASH
LOGS_GROUP_ID = settings.LOGS_GROUP_ID
CHECK_INTERVAL = settings.CHECK_INTERVAL

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: account_id -> client
active_clients: Dict[int, TelegramClient] = {}


async def run_monitoring():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ. –ö–∞–∂–¥—ã–µ CHECK_INTERVAL —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã (is_monitoring=true).
    –ü–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã, –æ—Ç–∫–ª—é—á–∞–µ—Ç —Ç–µ, —É –∫–æ–≥–æ monitoring –≤—ã–∫–ª—é—á–µ–Ω.
    """
    logger.info(
        "run_monitoring: –ó–∞–ø—É—â–µ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. Timeout: {CHECK_INTERVAL}"
    )
    while True:
        logger.info("üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        await asyncio.sleep(CHECK_INTERVAL)

        # 1. –ë–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (dict) –∏–∑ CRUD, –≥–¥–µ is_monitoring=True
        try:
            accounts = list_telegram_accounts_with_monitoring()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}", exc_info=True)
            continue

        logger.info(
            "run_monitoring: –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %d", len(accounts)
        )

        # –°–æ–±–∏—Ä–∞–µ–º id –≤ —Å–µ—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        current_ids = set(acc["id"] for acc in accounts)

        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
        for acc in accounts:
            acc_id = acc["id"]
            if acc_id not in active_clients:
                # –ü–æ–¥–Ω–∏–º–∞–µ–º Telethon-–∫–ª–∏–µ–Ω—Ç
                try:
                    client = await start_client_for_account(acc)
                    active_clients[acc_id] = client
                    logger.info("–ó–∞–ø—É—â–µ–Ω Telethon-–∫–ª–∏–µ–Ω—Ç –¥–ª—è account_id=%d", acc_id)
                except Exception as e:
                    logger.error(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è account_id=%d: %s",
                        acc_id,
                        e,
                        exc_info=True,
                    )

        # 3. –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ is_monitoring
        for acc_id in list(active_clients.keys()):
            if acc_id not in current_ids:
                client = active_clients[acc_id]
                try:
                    await client.disconnect()
                    del active_clients[acc_id]
                    logger.info("–û—Ç–∫–ª—é—á–µ–Ω Telethon-–∫–ª–∏–µ–Ω—Ç –¥–ª—è account_id=%d", acc_id)
                except Exception as e:
                    logger.error(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ account_id=%d: %s",
                        acc_id,
                        e,
                        exc_info=True,
                    )


async def start_client_for_account(acc_dict: dict) -> TelegramClient:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç Telethon-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (NewMessage, MessageDeleted).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç client.
    """
    session_str = acc_dict["session_string"]
    account_id = acc_dict["id"]

    client = TelegramClient(
        StringSession(session_str), API_TELETHON_ID, API_TELETHON_HASH
    )

    await client.connect()
    if not await client.is_user_authorized():
        logger.warning("–ê–∫–∫–∞—É–Ω—Ç id=%d –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.", account_id)
        return client

    @client.on(events.NewMessage)
    async def handler_newmsg(event):
        """
        –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ (voice, document, photo...), –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –ª–æ–≥–æ–≤—É—é –≥—Ä—É–ø–ø—É.
        –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —á–µ—Ä–µ–∑ create_telegram_message.
        """
        chat_id = event.chat_id
        sender_id = event.sender_id
        msg_id = event.message.id
        date = event.message.date

        text = event.raw_text or ""
        logs_msg_id = None
        media_type = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ (voice, document, photo, video, etc.)
        if event.message.voice:
            media_type = "voice"
        elif event.message.photo:
            media_type = "photo"
        elif event.message.document:
            media_type = "document"
        elif event.message.video:
            media_type = "video"

        if media_type:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –ª–æ–≥–æ–≤—É—é –≥—Ä—É–ø–ø—É
            try:
                # forward_messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Message –∏–ª–∏ —Å–ø–∏—Å–æ–∫
                fwd = await client.forward_messages(
                    LOGS_GROUP_ID, event.message, chat_id
                )
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–π
                logs_msg_id = fwd.id if hasattr(fwd, "id") else fwd[0].id
                # –ó–∞–º–µ–Ω–∏–º —Ç–µ–∫—Å—Ç –∑–∞–≥–ª—É—à–∫–æ–π
                text = f"[{media_type}]"
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –º–µ–¥–∏–∞ –≤ LOGS_GROUP: {e}")

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        try:
            create_telegram_message(
                account_id=account_id,
                chat_id=chat_id,
                message_id=msg_id,
                sender_id=sender_id,
                text=text,
                date=date,
                logs_msg_id=logs_msg_id,
                media_type=media_type,
            )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: %s", e, exc_info=True)

    @client.on(events.MessageDeleted())
    async def handler_deleted(event):
        """
        –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è.
        event.deleted_ids - —Å–ø–∏—Å–æ–∫ ID —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        deleted_ids = event.deleted_ids
        # –í—ã–∑—ã–≤–∞–µ–º mark_deleted_messages
        try:
            mark_deleted_messages(account_id, deleted_ids)
        except Exception as e:
            logger.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: %s", e, exc_info=True
            )

    return client
