from pathlib import Path
from aiogram.types import FSInputFile
import math
import logging
from aiogram import Router, types
from bot.callbacks.callbackData import (
    UsersCallbackFactory,
    PAGE_SIZE,
    get_users_keyboard,
    ACCOUNT_PAGE_SIZE,
    get_check_accounts,
    get_accounts_keyboard,
    get_chats_keyboard,
)
from db.services.user_crud import get_all_users
from db.services.telegram_crud import (
    list_telegram_accounts,
    list_chats_for_account,
    get_chat_messages,
    get_telegram_account_by_id,
    get_sender_display_name,
)
from jinja2 import Environment, FileSystemLoader
import base64
import tempfile
import os
import os.path

logger = logging.getLogger(__name__)

router = Router()

env = Environment(
    loader=FileSystemLoader("bot/templates")
)  # –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è chat.html
template = env.get_template("chat.html")


def generate_chat_html(chat_id: int, messages: list[dict]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML, –≤—Å—Ç—Ä–∞–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∏/–º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ, etc.) –≤ Base64.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É HTML (Unicode).
    """
    for m in messages:
        media_path = m.get("media_path")
        if media_path and os.path.exists(media_path):
            with open(media_path, "rb") as f:
                data = f.read()
            # base64
            m["embed_b64"] = base64.b64encode(data).decode("utf-8")
        else:
            m["embed_b64"] = None

        # "–≥–æ–ª–æ—Å–∞" (ogg/opus) => voice, mp4 => video, jpg/png => photo, –∏–Ω–∞—á–µ document
        if not m.get("media_type"):
            ext = os.path.splitext(media_path or "")[1].lower()
            if ext in (".jpg", ".jpeg", ".png"):
                m["media_type"] = "photo"
            elif ext in (".ogg", ".opus"):
                m["media_type"] = "voice"
            elif ext in (".mp4", ".mov"):
                m["media_type"] = "video"
            else:
                m["media_type"] = "document"

    html_out = template.render(chat_id=chat_id, messages=messages)
    return html_out


@router.callback_query(UsersCallbackFactory.filter())
async def process_users_callback(
    query: types.CallbackQuery, callback_data: UsersCallbackFactory
):
    all_users = get_all_users()
    if not all_users:
        await query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        await query.answer()
        return

    total_pages = math.ceil(len(all_users) / PAGE_SIZE)

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü (—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if callback_data.action == "page":
        page = callback_data.page
        start_idx = (page - 1) * PAGE_SIZE
        end_idx = start_idx + PAGE_SIZE
        users_on_page = all_users[start_idx:end_idx]

        text = f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>"
        keyboard = get_users_keyboard(page, total_pages, users_on_page)

        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await query.answer()

    # –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    elif callback_data.action == "details":
        user_id = callback_data.user_id
        user_obj = next((u for u in all_users if u["id"] == user_id), None)
        if not user_obj:
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –µ—Å–ª–∏ –Ω–∞–¥–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å
        accounts = list_telegram_accounts(user_id)
        total_accounts = len(accounts)
        monitored_count = sum(1 for acc in accounts if acc.get("is_monitoring"))

        details_text = (
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
            f"ID: <code>{user_obj['id']}</code>\n"
            f"Username: <code>{user_obj['username']}</code>\n"
            f"Admin: <code>{user_obj['is_admin']}</code>\n\n"
            f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <code>{total_accounts}</code>\n"
            f"–ú–æ–Ω–∏—Ç–æ—Ä—è—Ç—Å—è: <code>{monitored_count}</code>"
        )

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã"
        kb = get_check_accounts(user_id)

        # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á—Ç–æ–±—ã –Ω–µ –Ω–∞–∂–∏–º–∞–ª–∏ —Å–Ω–æ–≤–∞)
        await query.message.edit_reply_markup(None)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await query.message.answer(details_text, reply_markup=kb, parse_mode="HTML")
        await query.answer()

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    elif callback_data.action == "user_accounts":
        user_id = callback_data.user_id
        # –°–Ω–æ–≤–∞ –Ω–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–º, –µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ)
        user_obj = next((u for u in all_users if u["id"] == user_id), None)
        if not user_obj:
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = list_telegram_accounts(user_id)
        if not accounts:
            await query.message.edit_text("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
            await query.answer()
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        page = callback_data.page
        total_acc_pages = math.ceil(len(accounts) / ACCOUNT_PAGE_SIZE)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if page < 1 or page > total_acc_pages:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!", show_alert=True)
            return

        start_idx = (page - 1) * ACCOUNT_PAGE_SIZE
        end_idx = start_idx + ACCOUNT_PAGE_SIZE
        accounts_on_page = accounts[start_idx:end_idx]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        text = (
            f"<b>–ê–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n" f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_acc_pages}\n"
        )

        keyboard = get_accounts_keyboard(
            page, total_acc_pages, user_id, accounts_on_page
        )

        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await query.answer()

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
    elif callback_data.action == "account_chats":
        account_id = callback_data.account_id
        chats = list_chats_for_account(account_id)
        if not chats:
            await query.message.edit_text("üì≠ –£ —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤!")
            await query.answer()
            return

        total_pages = math.ceil(len(chats) / PAGE_SIZE)
        page = callback_data.page
        if page < 1 or page > total_pages:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–æ–≤!", show_alert=True)
            return

        start_idx = (page - 1) * PAGE_SIZE
        end_idx = start_idx + PAGE_SIZE
        chats_on_page = chats[start_idx:end_idx]

        keyboard = get_chats_keyboard(page, total_pages, account_id, chats_on_page)
        await query.message.edit_text(
            f"<b>üìÅ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Å—Ç—Ä. {page}/{total_pages}):</b>",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
        await query.answer()
    elif callback_data.action == "chat_messages":
        account_id = callback_data.account_id
        chat_id = callback_data.chat_id

        messages = get_chat_messages(account_id, chat_id)
        if not messages:
            await query.message.edit_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!")
            await query.answer()
            return

        # 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º local_id (–∫—Ç–æ "–º—ã")
        acc_dict = get_telegram_account_by_id(account_id)
        alias = acc_dict["alias"]
        user_id = acc_dict["user_id"]

        # 2) –î–æ–ø–æ–ª–Ω–∏–º –ø–æ–ª—è –≤ messages
        for m in messages:
            m["sender_str"] = m.get("sender_name") or m.get("chat_name", "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫")

            # filename –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if m.get("media_path"):
                m["filename"] = os.path.basename(m["media_path"])
            else:
                m["filename"] = "file.bin"
        # 3) –§–æ—Ä–º–∏—Ä—É–µ–º HTML
        html_content = generate_chat_html(chat_id, messages)

        # 5) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (UTF-8!)
        with tempfile.NamedTemporaryFile(
            "w", encoding="utf-8", delete=False, suffix=".html"
        ) as tmp:
            tmp.write(html_content)
            tmp_path = tmp.name

        await query.message.edit_text("–§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π HTML-—Ñ–∞–π–ª...")
        await query.answer()

        # 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await query.message.answer_document(
            FSInputFile(tmp_path), caption=f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ {chat_id}"
        )
        os.remove(tmp_path)
